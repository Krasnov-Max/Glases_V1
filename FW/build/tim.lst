ARM GAS  /tmp/cc33wyvr.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_TIM2_Init,"ax",%progbits
  18              		.align	1
  19              		.global	MX_TIM2_Init
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_TIM2_Init:
  25              	.LFB574:
  26              		.file 1 "Core/Src/tim.c"
   1:Core/Src/tim.c **** /* USER CODE BEGIN Header */
   2:Core/Src/tim.c **** /**
   3:Core/Src/tim.c ****   ******************************************************************************
   4:Core/Src/tim.c ****   * @file    tim.c
   5:Core/Src/tim.c ****   * @brief   This file provides code for the configuration
   6:Core/Src/tim.c ****   *          of the TIM instances.
   7:Core/Src/tim.c ****   ******************************************************************************
   8:Core/Src/tim.c ****   * @attention
   9:Core/Src/tim.c ****   *
  10:Core/Src/tim.c ****   * Copyright (c) 2022 STMicroelectronics.
  11:Core/Src/tim.c ****   * All rights reserved.
  12:Core/Src/tim.c ****   *
  13:Core/Src/tim.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/tim.c ****   * in the root directory of this software component.
  15:Core/Src/tim.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/tim.c ****   *
  17:Core/Src/tim.c ****   ******************************************************************************
  18:Core/Src/tim.c ****   */
  19:Core/Src/tim.c **** /* USER CODE END Header */
  20:Core/Src/tim.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/tim.c **** #include "tim.h"
  22:Core/Src/tim.c **** 
  23:Core/Src/tim.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/tim.c **** 
  25:Core/Src/tim.c **** /* USER CODE END 0 */
  26:Core/Src/tim.c **** 
  27:Core/Src/tim.c **** /* TIM2 init function */
  28:Core/Src/tim.c **** void MX_TIM2_Init(void)
  29:Core/Src/tim.c **** {
  27              		.loc 1 29 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
ARM GAS  /tmp/cc33wyvr.s 			page 2


  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 87B0     		sub	sp, sp, #28
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 40
  30:Core/Src/tim.c **** 
  31:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_Init 0 */
  32:Core/Src/tim.c **** 
  33:Core/Src/tim.c ****   /* USER CODE END TIM2_Init 0 */
  34:Core/Src/tim.c **** 
  35:Core/Src/tim.c ****   LL_TIM_InitTypeDef TIM_InitStruct = {0};
  40              		.loc 1 35 3 view .LVU1
  41              		.loc 1 35 22 is_stmt 0 view .LVU2
  42 0004 02AD     		add	r5, sp, #8
  43 0006 1022     		movs	r2, #16
  44 0008 0021     		movs	r1, #0
  45 000a 2800     		movs	r0, r5
  46 000c FFF7FEFF 		bl	memset
  47              	.LVL0:
  36:Core/Src/tim.c **** 
  37:Core/Src/tim.c ****   /* Peripheral clock enable */
  38:Core/Src/tim.c ****   LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
  48              		.loc 1 38 3 is_stmt 1 view .LVU3
  49              	.LBB16:
  50              	.LBI16:
  51              		.file 2 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h"
   1:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @file    stm32l0xx_ll_bus.h
   4:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief   Header file of BUS LL module.
   6:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
   7:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   @verbatim
   8:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****                       ##### RCC Limitations #####
   9:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ==============================================================================
  10:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****     [..]
  11:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       A delay between an RCC peripheral clock enable and the effective peripheral
  12:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       enabling should be taken into account in order to manage the peripheral read/write
  13:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       from/to registers.
  14:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       (+) This delay depends on the peripheral mapping.
  15:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  16:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  17:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****     [..]
  18:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       Workarounds:
  19:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  20:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****           inserted in each LL_{BUS}_GRP{x}_EnableClock() function.
  21:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  22:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   @endverbatim
  23:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ******************************************************************************
  24:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @attention
  25:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
  26:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
ARM GAS  /tmp/cc33wyvr.s 			page 3


  27:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * All rights reserved.</center></h2>
  28:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
  29:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  30:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * the "License"; You may not use this file except in compliance with the
  31:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * License. You may obtain a copy of the License at:
  32:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *                        opensource.org/licenses/BSD-3-Clause
  33:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
  34:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ******************************************************************************
  35:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  36:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  37:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  38:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #ifndef __STM32L0xx_LL_BUS_H
  39:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define __STM32L0xx_LL_BUS_H
  40:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  41:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #ifdef __cplusplus
  42:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** extern "C" {
  43:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
  44:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  45:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Includes ------------------------------------------------------------------*/
  46:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #include "stm32l0xx.h"
  47:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  48:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @addtogroup STM32L0xx_LL_Driver
  49:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  50:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  51:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  52:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(RCC)
  53:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  54:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL BUS
  55:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  56:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  57:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  58:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private types -------------------------------------------------------------*/
  59:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private variables ---------------------------------------------------------*/
  60:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  61:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private constants ---------------------------------------------------------*/
  62:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  63:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private macros ------------------------------------------------------------*/
  64:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  65:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported types ------------------------------------------------------------*/
  66:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported constants --------------------------------------------------------*/
  67:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Constants BUS Exported Constants
  68:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  69:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  70:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  71:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB1_GRP1_PERIPH  AHB1 GRP1 PERIPH
  72:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  73:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  74:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
  75:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA1           RCC_AHBENR_DMA1EN      /*!< DMA1 clock enable */
  76:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_MIF            RCC_AHBENR_MIFEN       /*!< MIF clock enable */
  77:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SRAM           RCC_AHBSMENR_SRAMSMEN  /*!< Sleep Mode SRAM clock enable
  78:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRC            RCC_AHBENR_CRCEN       /*!< CRC clock enable */
  79:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TSC)
  80:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_TSC            RCC_AHBENR_TSCEN       /*!< TSC clock enable */
  81:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*TSC*/
  82:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(RNG)
  83:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_RNG            RCC_AHBENR_RNGEN       /*!< RNG clock enable */
ARM GAS  /tmp/cc33wyvr.s 			page 4


  84:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*RNG*/
  85:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(AES)
  86:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRYP           RCC_AHBENR_CRYPEN      /*!< CRYP clock enable */
  87:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*AES*/
  88:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
  89:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
  90:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  91:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  92:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  93:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP1_PERIPH  APB1 GRP1 PERIPH
  94:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  95:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  96:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
  97:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM2           RCC_APB1ENR_TIM2EN     /*!< TIM2 clock enable */
  98:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM3)
  99:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM3           RCC_APB1ENR_TIM3EN     /*!< TIM3 clock enable */
 100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM6)
 102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM6           RCC_APB1ENR_TIM6EN     /*!< TIM6 clock enable */
 103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM7)
 105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM7           RCC_APB1ENR_TIM7EN     /*!< TIM7 clock enable */
 106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(LCD)
 108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LCD            RCC_APB1ENR_LCDEN      /*!< LCD clock enable */
 109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*LCD*/
 110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_WWDG           RCC_APB1ENR_WWDGEN     /*!< WWDG clock enable */
 111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(SPI2)
 112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI2           RCC_APB1ENR_SPI2EN     /*!< SPI2 clock enable */
 113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART2         RCC_APB1ENR_USART2EN   /*!< USART2 clock enable */
 115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPUART1        RCC_APB1ENR_LPUART1EN  /*!< LPUART1 clock enable */
 116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USART4)
 117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART4         RCC_APB1ENR_USART4EN   /*!< USART4 clock enable */
 118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USART5)
 120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART5         RCC_APB1ENR_USART5EN   /*!< USART5 clock enable */
 121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C1           RCC_APB1ENR_I2C1EN     /*!< I2C1 clock enable */
 123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(I2C2)
 124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C2           RCC_APB1ENR_I2C2EN     /*!< I2C2 clock enable */
 125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USB)
 127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USB            RCC_APB1ENR_USBEN      /*!< USB clock enable */
 128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*USB*/
 129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(CRS)
 130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CRS            RCC_APB1ENR_CRSEN      /*!< CRS clock enable */
 131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*CRS*/
 132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_PWR            RCC_APB1ENR_PWREN      /*!< PWR clock enable */
 133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(DAC)
 134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DAC1           RCC_APB1ENR_DACEN      /*!< DAC clock enable */
 135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(I2C3)
 137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C3           RCC_APB1ENR_I2C3EN     /*!< I2C3 clock enable */
 138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPTIM1         RCC_APB1ENR_LPTIM1EN   /*!< LPTIM1 clock enable */
 140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
ARM GAS  /tmp/cc33wyvr.s 			page 5


 141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB2_GRP1_PERIPH  APB2 GRP1 PERIPH
 148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ALL            0xFFFFFFFFU
 151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SYSCFG         RCC_APB2ENR_SYSCFGEN  /*!< SYSCFG clock enable */
 152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM21          RCC_APB2ENR_TIM21EN   /*!< TIM21 clock enable */
 153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM22)
 154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM22          RCC_APB2ENR_TIM22EN   /*!< TIM22 clock enable */
 155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_FW             RCC_APB2ENR_FWEN      /*!< FireWall clock enable */
 157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC1           RCC_APB2ENR_ADC1EN    /*!< ADC1 clock enable */
 158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI1           RCC_APB2ENR_SPI1EN    /*!< SPI1 clock enable */
 159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USART1)
 160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_USART1         RCC_APB2ENR_USART1EN  /*!< USART1 clock enable */
 161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_DBGMCU         RCC_APB2ENR_DBGMCUEN  /*!< DBGMCU clock enable */
 163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_IOP_GRP1_PERIPH  IOP GRP1 PERIPH
 171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_ALL             0xFFFFFFFFU
 174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOA           RCC_IOPENR_GPIOAEN    /*!< GPIO port A control */
 175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOB           RCC_IOPENR_GPIOBEN    /*!< GPIO port B control */
 176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOC           RCC_IOPENR_GPIOCEN    /*!< GPIO port C control */
 177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(GPIOD)
 178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOD           RCC_IOPENR_GPIODEN    /*!< GPIO port D control */
 179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*GPIOD*/
 180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(GPIOE)
 181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOE           RCC_IOPENR_GPIOEEN    /*!< GPIO port H control */
 182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*GPIOE*/
 183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(GPIOH)
 184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOH           RCC_IOPENR_GPIOHEN    /*!< GPIO port H control */
 185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*GPIOH*/
 186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported macro ------------------------------------------------------------*/
 196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported functions --------------------------------------------------------*/
 197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Functions BUS Exported Functions
ARM GAS  /tmp/cc33wyvr.s 			page 6


 198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB1 AHB1
 202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock.
 207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBENR      DMAEN        LL_AHB1_GRP1_EnableClock\n
 208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      MIFEN        LL_AHB1_GRP1_EnableClock\n
 209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRCEN        LL_AHB1_GRP1_EnableClock\n
 210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      TSCEN        LL_AHB1_GRP1_EnableClock\n
 211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      RNGEN        LL_AHB1_GRP1_EnableClock\n
 212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRYPEN       LL_AHB1_GRP1_EnableClock
 213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
 225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->AHBENR, Periphs);
 228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Check if AHB1 peripheral clock is enabled or not
 235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBENR      DMAEN        LL_AHB1_GRP1_IsEnabledClock\n
 236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      MIFEN        LL_AHB1_GRP1_IsEnabledClock\n
 237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRCEN        LL_AHB1_GRP1_IsEnabledClock\n
 238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      TSCEN        LL_AHB1_GRP1_IsEnabledClock\n
 239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      RNGEN        LL_AHB1_GRP1_IsEnabledClock\n
 240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRYPEN       LL_AHB1_GRP1_IsEnabledClock
 241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
 253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   return ((READ_BIT(RCC->AHBENR, Periphs) == (Periphs)) ? 1UL : 0UL);
ARM GAS  /tmp/cc33wyvr.s 			page 7


 255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock.
 259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBENR      DMAEN        LL_AHB1_GRP1_DisableClock\n
 260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      MIFEN        LL_AHB1_GRP1_DisableClock\n
 261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRCEN        LL_AHB1_GRP1_DisableClock\n
 262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      TSCEN        LL_AHB1_GRP1_DisableClock\n
 263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      RNGEN        LL_AHB1_GRP1_DisableClock\n
 264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRYPEN       LL_AHB1_GRP1_DisableClock
 265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
 277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBENR, Periphs);
 279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Force AHB1 peripherals reset.
 283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBRSTR      DMARST        LL_AHB1_GRP1_ForceReset\n
 284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      MIFRST        LL_AHB1_GRP1_ForceReset\n
 285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ForceReset\n
 286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      TSCRST        LL_AHB1_GRP1_ForceReset\n
 287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      RNGRST        LL_AHB1_GRP1_ForceReset\n
 288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRYPRST       LL_AHB1_GRP1_ForceReset
 289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
 302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->AHBRSTR, Periphs);
 304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Release AHB1 peripherals reset.
 308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBRSTR      DMARST        LL_AHB1_GRP1_ReleaseReset\n
 309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      MIFRST        LL_AHB1_GRP1_ReleaseReset\n
 310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ReleaseReset\n
 311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      TSCRST        LL_AHB1_GRP1_ReleaseReset\n
ARM GAS  /tmp/cc33wyvr.s 			page 8


 312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      RNGRST        LL_AHB1_GRP1_ReleaseReset\n
 313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRYPRST       LL_AHB1_GRP1_ReleaseReset
 314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
 327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBRSTR, Periphs);
 329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock during Low Power (Sleep) mode.
 333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBSMENR     DMASMEN       LL_AHB1_GRP1_EnableClockSleep\n
 334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     MIFSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     SRAMSMEN      LL_AHB1_GRP1_EnableClockSleep\n
 336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRCSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     TSCSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     RNGSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRYPSMEN      LL_AHB1_GRP1_EnableClockSleep
 340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
 353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->AHBSMENR, Periphs);
 356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBSMENR, Periphs);
 358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock during Low Power (Sleep) mode.
 363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBSMENR     DMASMEN       LL_AHB1_GRP1_DisableClockSleep\n
 364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     MIFSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     SRAMSMEN      LL_AHB1_GRP1_DisableClockSleep\n
 366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRCSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     TSCSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     RNGSMEN       LL_AHB1_GRP1_DisableClockSleep\n
ARM GAS  /tmp/cc33wyvr.s 			page 9


 369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRYPSMEN      LL_AHB1_GRP1_DisableClockSleep
 370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClockSleep(uint32_t Periphs)
 383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBSMENR, Periphs);
 385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB1 APB1
 392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1ENR     TIM2EN        LL_APB1_GRP1_EnableClock\n
 398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM3EN        LL_APB1_GRP1_EnableClock\n
 399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM6EN        LL_APB1_GRP1_EnableClock\n
 400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM7EN        LL_APB1_GRP1_EnableClock\n
 401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LCDEN         LL_APB1_GRP1_EnableClock\n
 402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     WWDGEN        LL_APB1_GRP1_EnableClock\n
 403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     SPI2EN        LL_APB1_GRP1_EnableClock\n
 404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART2EN      LL_APB1_GRP1_EnableClock\n
 405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPUART1EN     LL_APB1_GRP1_EnableClock\n
 406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART4EN      LL_APB1_GRP1_EnableClock\n
 407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART5EN      LL_APB1_GRP1_EnableClock\n
 408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C1EN        LL_APB1_GRP1_EnableClock\n
 409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C2EN        LL_APB1_GRP1_EnableClock\n
 410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USBEN         LL_APB1_GRP1_EnableClock\n
 411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     CRSEN         LL_APB1_GRP1_EnableClock\n
 412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     PWREN         LL_APB1_GRP1_EnableClock\n
 413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     DACEN         LL_APB1_GRP1_EnableClock\n
 414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C3EN        LL_APB1_GRP1_EnableClock\n
 415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPTIM1EN      LL_APB1_GRP1_EnableClock
 416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
ARM GAS  /tmp/cc33wyvr.s 			page 10


 426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
  52              		.loc 2 440 22 view .LVU4
  53              	.LBB17:
 441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
  54              		.loc 2 442 3 view .LVU5
 443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB1ENR, Periphs);
  55              		.loc 2 443 3 view .LVU6
  56 0010 184A     		ldr	r2, .L2
  57 0012 916B     		ldr	r1, [r2, #56]
  58 0014 0123     		movs	r3, #1
  59 0016 1943     		orrs	r1, r3
  60 0018 9163     		str	r1, [r2, #56]
 444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
  61              		.loc 2 445 3 view .LVU7
  62              		.loc 2 445 12 is_stmt 0 view .LVU8
  63 001a 926B     		ldr	r2, [r2, #56]
  64 001c 1340     		ands	r3, r2
  65              		.loc 2 445 10 view .LVU9
  66 001e 0193     		str	r3, [sp, #4]
 446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
  67              		.loc 2 446 3 is_stmt 1 view .LVU10
  68 0020 019B     		ldr	r3, [sp, #4]
  69              	.LVL1:
  70              		.loc 2 446 3 is_stmt 0 view .LVU11
  71              	.LBE17:
  72              	.LBE16:
  39:Core/Src/tim.c **** 
  40:Core/Src/tim.c ****   /* TIM2 interrupt Init */
  41:Core/Src/tim.c ****   NVIC_SetPriority(TIM2_IRQn, 0);
  73              		.loc 1 41 3 is_stmt 1 view .LVU12
  74              	.LBB18:
  75              	.LBI18:
  76              		.file 3 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.6
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
ARM GAS  /tmp/cc33wyvr.s 			page 11


   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
ARM GAS  /tmp/cc33wyvr.s 			page 12


  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
ARM GAS  /tmp/cc33wyvr.s 			page 13


 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
ARM GAS  /tmp/cc33wyvr.s 			page 14


 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc33wyvr.s 			page 15


 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc33wyvr.s 			page 16


 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
ARM GAS  /tmp/cc33wyvr.s 			page 17


 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
ARM GAS  /tmp/cc33wyvr.s 			page 18


 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
ARM GAS  /tmp/cc33wyvr.s 			page 19


 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  /tmp/cc33wyvr.s 			page 20


 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc33wyvr.s 			page 21


 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
ARM GAS  /tmp/cc33wyvr.s 			page 22


 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
ARM GAS  /tmp/cc33wyvr.s 			page 23


 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 746:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 747:Drivers/CMSIS/Include/core_cm0plus.h **** }
 748:Drivers/CMSIS/Include/core_cm0plus.h **** 
 749:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc33wyvr.s 			page 24


 750:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 751:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 752:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 758:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 759:Drivers/CMSIS/Include/core_cm0plus.h **** {
 760:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 761:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 764:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 766:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 768:Drivers/CMSIS/Include/core_cm0plus.h **** }
 769:Drivers/CMSIS/Include/core_cm0plus.h **** 
 770:Drivers/CMSIS/Include/core_cm0plus.h **** 
 771:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 772:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 773:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 777:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 778:Drivers/CMSIS/Include/core_cm0plus.h **** {
 779:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 780:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 782:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 784:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 785:Drivers/CMSIS/Include/core_cm0plus.h **** }
 786:Drivers/CMSIS/Include/core_cm0plus.h **** 
 787:Drivers/CMSIS/Include/core_cm0plus.h **** 
 788:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 789:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 790:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 796:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 797:Drivers/CMSIS/Include/core_cm0plus.h **** {
 798:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 799:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 804:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 806:Drivers/CMSIS/Include/core_cm0plus.h **** }
ARM GAS  /tmp/cc33wyvr.s 			page 25


 807:Drivers/CMSIS/Include/core_cm0plus.h **** 
 808:Drivers/CMSIS/Include/core_cm0plus.h **** 
 809:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 810:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 811:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 815:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 816:Drivers/CMSIS/Include/core_cm0plus.h **** {
 817:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 818:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 821:Drivers/CMSIS/Include/core_cm0plus.h **** }
 822:Drivers/CMSIS/Include/core_cm0plus.h **** 
 823:Drivers/CMSIS/Include/core_cm0plus.h **** 
 824:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 825:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 826:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 830:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 831:Drivers/CMSIS/Include/core_cm0plus.h **** {
 832:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 833:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 836:Drivers/CMSIS/Include/core_cm0plus.h **** }
 837:Drivers/CMSIS/Include/core_cm0plus.h **** 
 838:Drivers/CMSIS/Include/core_cm0plus.h **** 
 839:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 840:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 841:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 842:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 843:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 845:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 848:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
  77              		.loc 3 848 22 view .LVU13
  78              	.LBB19:
 849:Drivers/CMSIS/Include/core_cm0plus.h **** {
 850:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
  79              		.loc 3 850 3 view .LVU14
 851:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  80              		.loc 3 852 5 view .LVU15
  81              		.loc 3 852 52 is_stmt 0 view .LVU16
  82 0022 154A     		ldr	r2, .L2+4
  83 0024 C321     		movs	r1, #195
  84 0026 8900     		lsls	r1, r1, #2
  85 0028 5358     		ldr	r3, [r2, r1]
  86              		.loc 3 852 33 view .LVU17
  87 002a 1B02     		lsls	r3, r3, #8
ARM GAS  /tmp/cc33wyvr.s 			page 26


  88 002c 1B0A     		lsrs	r3, r3, #8
  89              		.loc 3 852 30 view .LVU18
  90 002e 5350     		str	r3, [r2, r1]
  91              	.LVL2:
  92              		.loc 3 852 30 view .LVU19
  93              	.LBE19:
  94              	.LBE18:
  42:Core/Src/tim.c ****   NVIC_EnableIRQ(TIM2_IRQn);
  95              		.loc 1 42 3 is_stmt 1 view .LVU20
  96              	.LBB20:
  97              	.LBI20:
 741:Drivers/CMSIS/Include/core_cm0plus.h **** {
  98              		.loc 3 741 22 view .LVU21
  99              	.LBB21:
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 100              		.loc 3 743 3 view .LVU22
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 101              		.loc 3 745 5 view .LVU23
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 102              		.loc 3 745 20 is_stmt 0 view .LVU24
 103 0030 8023     		movs	r3, #128
 104 0032 1B02     		lsls	r3, r3, #8
 105 0034 1360     		str	r3, [r2]
 106              	.LVL3:
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 107              		.loc 3 745 20 view .LVU25
 108              	.LBE21:
 109              	.LBE20:
  43:Core/Src/tim.c **** 
  44:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_Init 1 */
  45:Core/Src/tim.c **** 
  46:Core/Src/tim.c ****   /* USER CODE END TIM2_Init 1 */
  47:Core/Src/tim.c ****   TIM_InitStruct.Prescaler = 32000-1;
 110              		.loc 1 47 3 is_stmt 1 view .LVU26
 111              		.loc 1 47 28 is_stmt 0 view .LVU27
 112 0036 114B     		ldr	r3, .L2+8
 113 0038 2B80     		strh	r3, [r5]
  48:Core/Src/tim.c ****   TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 114              		.loc 1 48 3 is_stmt 1 view .LVU28
 115              		.loc 1 48 30 is_stmt 0 view .LVU29
 116 003a 0023     		movs	r3, #0
 117 003c 0393     		str	r3, [sp, #12]
  49:Core/Src/tim.c ****   TIM_InitStruct.Autoreload = 1000-1;
 118              		.loc 1 49 3 is_stmt 1 view .LVU30
 119              		.loc 1 49 29 is_stmt 0 view .LVU31
 120 003e 104A     		ldr	r2, .L2+12
 121 0040 0492     		str	r2, [sp, #16]
  50:Core/Src/tim.c ****   TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 122              		.loc 1 50 3 is_stmt 1 view .LVU32
 123              		.loc 1 50 32 is_stmt 0 view .LVU33
 124 0042 0593     		str	r3, [sp, #20]
  51:Core/Src/tim.c ****   LL_TIM_Init(TIM2, &TIM_InitStruct);
 125              		.loc 1 51 3 is_stmt 1 view .LVU34
 126 0044 8024     		movs	r4, #128
 127 0046 E405     		lsls	r4, r4, #23
 128 0048 2900     		movs	r1, r5
 129 004a 2000     		movs	r0, r4
ARM GAS  /tmp/cc33wyvr.s 			page 27


 130 004c FFF7FEFF 		bl	LL_TIM_Init
 131              	.LVL4:
  52:Core/Src/tim.c ****   LL_TIM_DisableARRPreload(TIM2);
 132              		.loc 1 52 3 view .LVU35
 133              	.LBB22:
 134              	.LBI22:
 135              		.file 4 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h"
   1:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @file    stm32l0xx_ll_tim.h
   4:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief   Header file of TIM LL module.
   6:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   ******************************************************************************
   7:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @attention
   8:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *
   9:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *
  12:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *
  17:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   ******************************************************************************
  18:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
  19:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  20:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #ifndef __STM32L0xx_LL_TIM_H
  22:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define __STM32L0xx_LL_TIM_H
  23:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  24:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #ifdef __cplusplus
  25:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** extern "C" {
  26:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif
  27:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  28:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #include "stm32l0xx.h"
  30:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  31:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @addtogroup STM32L0xx_LL_Driver
  32:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
  33:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
  34:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  35:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined (TIM2) || defined (TIM3) || defined (TIM21) || defined (TIM22) || defined (TIM6) || def
  36:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  37:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL TIM
  38:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
  39:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
  40:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  41:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Variables TIM Private Variables
  44:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
  45:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
  46:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** static const uint8_t OFFSET_TAB_CCMRx[] =
  47:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
  48:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0x00U,   /* 0: TIMx_CH1  */
  49:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0x00U,   /* 1: NA */
  50:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0x00U,   /* 2: TIMx_CH2  */
ARM GAS  /tmp/cc33wyvr.s 			page 28


  51:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0x00U,   /* 3: NA */
  52:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0x04U,   /* 4: TIMx_CH3  */
  53:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0x00U,   /* 5: NA */
  54:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0x04U    /* 6: TIMx_CH4  */
  55:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** };
  56:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  57:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OCxx[] =
  58:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
  59:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 0: OC1M, OC1FE, OC1PE */
  60:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 1: - NA */
  61:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   8U,            /* 2: OC2M, OC2FE, OC2PE */
  62:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 3: - NA */
  63:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 4: OC3M, OC3FE, OC3PE */
  64:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 5: - NA */
  65:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   8U             /* 6: OC4M, OC4FE, OC4PE */
  66:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** };
  67:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  68:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_ICxx[] =
  69:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
  70:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 0: CC1S, IC1PSC, IC1F */
  71:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 1: - NA */
  72:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   8U,            /* 2: CC2S, IC2PSC, IC2F */
  73:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 3: - NA */
  74:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 4: CC3S, IC3PSC, IC3F */
  75:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 5: - NA */
  76:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   8U             /* 6: CC4S, IC4PSC, IC4F */
  77:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** };
  78:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  79:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_CCxP[] =
  80:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
  81:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 0: CC1P */
  82:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 1: NA */
  83:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   4U,            /* 2: CC2P */
  84:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 3: NA */
  85:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   8U,            /* 4: CC3P */
  86:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   0U,            /* 5: NA */
  87:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   12U            /* 6: CC4P */
  88:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** };
  89:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  90:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
  91:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
  92:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
  93:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  94:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Private constants ---------------------------------------------------------*/
  95:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Constants TIM Private Constants
  96:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
  97:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
  98:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
  99:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Remap mask definitions */
 101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define TIMx_OR_RMP_SHIFT  16U
 102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define TIMx_OR_RMP_MASK   0x0000FFFFU
 103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define TIM2_OR_RMP_MASK   ((TIM2_OR_ETR_RMP | TIM2_OR_TI4_RMP ) << TIMx_OR_RMP_SHIFT)
 104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define TIM21_OR_RMP_MASK  ((TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP) << TIMx_OR_RMP
 105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define TIM22_OR_RMP_MASK  ((TIM22_OR_ETR_RMP | TIM22_OR_TI1_RMP) << TIMx_OR_RMP_SHIFT)
 106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(TIM3)
 107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define TIM3_OR_RMP_MASK   ((TIM3_OR_ETR_RMP | TIM3_OR_TI1_RMP | TIM3_OR_TI2_RMP | \
ARM GAS  /tmp/cc33wyvr.s 			page 29


 108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                              TIM3_OR_TI4_RMP) << TIMx_OR_RMP_SHIFT)
 109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* TIM3 */
 110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Private macros ------------------------------------------------------------*/
 118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Macros TIM Private Macros
 119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @brief  Convert channel id into channel index.
 122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
 124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
 125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
 126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
 127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval none
 128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
 130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
 131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
 132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U : 6U)
 133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Exported types ------------------------------------------------------------*/
 140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_ES_INIT TIM Exported Init structure
 142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  TIM Time Base configuration structure definition.
 147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** typedef struct
 149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint16_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
 151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This parameter can be a number between Min_Data=0x0000 and Max_D
 152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    @ref LL_TIM_SetPrescaler().*/
 155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t CounterMode;       /*!< Specifies the counter mode.
 157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_COUNTERMODE.
 158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    @ref LL_TIM_SetCounterMode().*/
 161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t Autoreload;        /*!< Specifies the auto reload value to be loaded into the active
 163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    Auto-Reload Register at the next update event.
 164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This parameter must be a number between Min_Data=0x0000 and Max_
ARM GAS  /tmp/cc33wyvr.s 			page 30


 165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    Some timer instances may support 32 bits counters. In that case 
 166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    be a number between 0x0000 and 0xFFFFFFFF.
 167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    @ref LL_TIM_SetAutoReload().*/
 170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t ClockDivision;     /*!< Specifies the clock division.
 172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_CLOCKDIVISION.
 173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                    @ref LL_TIM_SetClockDivision().*/
 176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** } LL_TIM_InitTypeDef;
 177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  TIM Output Compare configuration structure definition.
 180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** typedef struct
 182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t OCMode;        /*!< Specifies the output mode.
 184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCMODE.
 185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetMode().*/
 188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t OCState;       /*!< Specifies the TIM Output Compare state.
 190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions
 193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                @ref LL_TIM_CC_EnableChannel() or @ref LL_TIM_CC_DisableChannel().*/
 194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t CompareValue;  /*!< Specifies the Compare value to be loaded into the Capture Compare Re
 196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a number between Min_Data=0x0000 and Max_Data=
 197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                LL_TIM_OC_SetCompareCHx (x=1..6).*/
 200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t OCPolarity;    /*!< Specifies the output polarity.
 202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetPolarity().*/
 206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** } LL_TIM_OC_InitTypeDef;
 209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  TIM Input Capture configuration structure definition.
 212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** typedef struct
 215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
 218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPolarity().*/
ARM GAS  /tmp/cc33wyvr.s 			page 31


 222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t ICActiveInput; /*!< Specifies the input.
 224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetActiveInput().*/
 228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t ICPrescaler;   /*!< Specifies the Input Capture Prescaler.
 230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPrescaler().*/
 234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t ICFilter;      /*!< Specifies the input capture filter.
 236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetFilter().*/
 240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** } LL_TIM_IC_InitTypeDef;
 241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  TIM Encoder interface configuration structure definition.
 245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** typedef struct
 247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t EncoderMode;     /*!< Specifies the encoder resolution (x2 or x4).
 249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ENCODERMODE.
 250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_SetEncoderMode().*/
 253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC1Polarity;     /*!< Specifies the active edge of TI1 input.
 255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC1ActiveInput;  /*!< Specifies the TI1 input source
 261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC1Prescaler;    /*!< Specifies the TI1 input prescaler value.
 267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC1Filter;       /*!< Specifies the TI1 input filter.
 273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC2Polarity;      /*!< Specifies the active edge of TI2 input.
ARM GAS  /tmp/cc33wyvr.s 			page 32


 279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC2ActiveInput;  /*!< Specifies the TI2 input source
 285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC2Prescaler;    /*!< Specifies the TI2 input prescaler value.
 291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t IC2Filter;       /*!< Specifies the TI2 input filter.
 297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** } LL_TIM_ENCODER_InitTypeDef;
 303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Exported constants --------------------------------------------------------*/
 311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Constants TIM Exported Constants
 312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_GET_FLAG Get Flags Defines
 316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief    Flags defines which can be used with LL_TIM_ReadReg function.
 317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_UIF                          TIM_SR_UIF           /*!< Update interrupt flag */
 320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC1IF                        TIM_SR_CC1IF         /*!< Capture/compare 1 interrup
 321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC2IF                        TIM_SR_CC2IF         /*!< Capture/compare 2 interrup
 322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC3IF                        TIM_SR_CC3IF         /*!< Capture/compare 3 interrup
 323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC4IF                        TIM_SR_CC4IF         /*!< Capture/compare 4 interrup
 324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_TIF                          TIM_SR_TIF           /*!< Trigger interrupt flag */
 325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC1OF                        TIM_SR_CC1OF         /*!< Capture/Compare 1 overcapt
 326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC2OF                        TIM_SR_CC2OF         /*!< Capture/Compare 2 overcapt
 327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC3OF                        TIM_SR_CC3OF         /*!< Capture/Compare 3 overcapt
 328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SR_CC4OF                        TIM_SR_CC4OF         /*!< Capture/Compare 4 overcapt
 329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IT IT Defines
 334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief    IT defines which can be used with LL_TIM_ReadReg and  LL_TIM_WriteReg functions.
 335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
ARM GAS  /tmp/cc33wyvr.s 			page 33


 336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DIER_UIE                        TIM_DIER_UIE         /*!< Update interrupt enable */
 338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DIER_CC1IE                      TIM_DIER_CC1IE       /*!< Capture/compare 1 interrup
 339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DIER_CC2IE                      TIM_DIER_CC2IE       /*!< Capture/compare 2 interrup
 340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DIER_CC3IE                      TIM_DIER_CC3IE       /*!< Capture/compare 3 interrup
 341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DIER_CC4IE                      TIM_DIER_CC4IE       /*!< Capture/compare 4 interrup
 342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DIER_TIE                        TIM_DIER_TIE         /*!< Trigger interrupt enable *
 343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_UPDATESOURCE Update Source
 348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_REGULAR            0x00000000U          /*!< Counter overflow/underflow
 351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_COUNTER            TIM_CR1_URS          /*!< Only counter overflow/unde
 352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ONEPULSEMODE One Pulse Mode
 357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_SINGLE             TIM_CR1_OPM          /*!< Counter stops counting at 
 360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_REPETITIVE         0x00000000U          /*!< Counter is not stopped at 
 361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERMODE Counter Mode
 366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_UP                  0x00000000U          /*!<Counter used as upcounter *
 369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_DOWN                TIM_CR1_DIR          /*!< Counter used as downcounte
 370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_DOWN         TIM_CR1_CMS_0        /*!< The counter counts up and 
 371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP           TIM_CR1_CMS_1        /*!<The counter counts up and d
 372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP_DOWN      TIM_CR1_CMS          /*!< The counter counts up and 
 373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKDIVISION Clock Division
 378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV1              0x00000000U          /*!< tDTS=tCK_INT */
 381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV2              TIM_CR1_CKD_0        /*!< tDTS=2*tCK_INT */
 382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV4              TIM_CR1_CKD_1        /*!< tDTS=4*tCK_INT */
 383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERDIRECTION Counter Direction
 388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_UP             0x00000000U          /*!< Timer counter counts up */
 391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_DOWN           TIM_CR1_DIR          /*!< Timer counter counts down 
 392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
ARM GAS  /tmp/cc33wyvr.s 			page 34


 393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCDMAREQUEST Capture Compare DMA Request
 398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_CC                 0x00000000U          /*!< CCx DMA request sent when 
 401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_UPDATE             TIM_CR2_CCDS         /*!< CCx DMA requests sent when
 402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CHANNEL Channel
 408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1                     TIM_CCER_CC1E     /*!< Timer input/output channel 1 
 411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2                     TIM_CCER_CC2E     /*!< Timer input/output channel 2 
 412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3                     TIM_CCER_CC3E     /*!< Timer input/output channel 3 
 413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH4                     TIM_CCER_CC4E     /*!< Timer input/output channel 4 
 414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCSTATE Output Configuration State
 420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCSTATE_DISABLE                 0x00000000U             /*!< OCx is not active */
 423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCSTATE_ENABLE                  TIM_CCER_CC1E           /*!< OCx signal is output on
 424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCMODE Output Configuration Mode
 430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_FROZEN                   0x00000000U                                         
 433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_ACTIVE                   TIM_CCMR1_OC1M_0                                    
 434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_INACTIVE                 TIM_CCMR1_OC1M_1                                    
 435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_TOGGLE                   (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)               
 436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_INACTIVE          TIM_CCMR1_OC1M_2                                    
 437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_ACTIVE            (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)               
 438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM1                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)               
 439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM2                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1
 440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCPOLARITY Output Configuration Polarity
 445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_HIGH                 0x00000000U                 /*!< OCxactive high*/
 448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_LOW                  TIM_CCER_CC1P               /*!< OCxactive low*/
 449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
ARM GAS  /tmp/cc33wyvr.s 			page 35


 450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ACTIVEINPUT Active Input Selection
 456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_DIRECTTI            (TIM_CCMR1_CC1S_0 << 16U) /*!< ICx is mapped on TIx 
 459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_INDIRECTTI          (TIM_CCMR1_CC1S_1 << 16U) /*!< ICx is mapped on TIy 
 460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_TRC                 (TIM_CCMR1_CC1S << 16U)   /*!< ICx is mapped on TRC 
 461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ICPSC Input Configuration Prescaler
 466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV1                      0x00000000U                    /*!< No prescaler, ca
 469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV2                      (TIM_CCMR1_IC1PSC_0 << 16U)    /*!< Capture is done 
 470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV4                      (TIM_CCMR1_IC1PSC_1 << 16U)    /*!< Capture is done 
 471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV8                      (TIM_CCMR1_IC1PSC << 16U)      /*!< Capture is done 
 472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_FILTER Input Configuration Filter
 477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1                 0x00000000U                                         
 480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N2              (TIM_CCMR1_IC1F_0 << 16U)                           
 481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N4              (TIM_CCMR1_IC1F_1 << 16U)                           
 482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N8              ((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)      
 483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N6              (TIM_CCMR1_IC1F_2 << 16U)                           
 484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)      
 485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N6              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)      
 486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N6              (TIM_CCMR1_IC1F_3 << 16U)                           
 488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N8              ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)      
 489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)      
 490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N8             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)      
 492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N8             (TIM_CCMR1_IC1F << 16U)                             
 495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_POLARITY Input Configuration Polarity
 500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_RISING              0x00000000U                      /*!< The circuit is
 503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_FALLING             TIM_CCER_CC1P                    /*!< The circuit is
 504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_BOTHEDGE            (TIM_CCER_CC1P | TIM_CCER_CC1NP) /*!< The circuit is
 505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
ARM GAS  /tmp/cc33wyvr.s 			page 36


 507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKSOURCE Clock Source
 510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_INTERNAL            0x00000000U                                         
 513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE1           (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)  
 514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE2           TIM_SMCR_ECE                                        
 515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ENCODERMODE Encoder Mode
 520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI1                     TIM_SMCR_SMS_0                               
 523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI2                     TIM_SMCR_SMS_1                               
 524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X4_TI12                   (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)             
 525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TRGO Trigger Output
 530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_RESET                      0x00000000U                                     /*!<
 533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_ENABLE                     TIM_CR2_MMS_0                                   /*!<
 534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_UPDATE                     TIM_CR2_MMS_1                                   /*!<
 535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_CC1IF                      (TIM_CR2_MMS_1 | TIM_CR2_MMS_0)                 /*!<
 536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_OC1REF                     TIM_CR2_MMS_2                                   /*!<
 537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_OC2REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_0)                 /*!<
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_OC3REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1)                 /*!<
 539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TRGO_OC4REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0) /*!<
 540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_SLAVEMODE Slave Mode
 546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_DISABLED              0x00000000U                         /*!< Slave mode 
 549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_RESET                 TIM_SMCR_SMS_2                      /*!< Reset Mode 
 550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_GATED                 (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)   /*!< Gated Mode 
 551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_TRIGGER               (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)   /*!< Trigger Mod
 552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TS Trigger Selection
 557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_ITR0                         0x00000000U                                         
 560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_ITR1                         TIM_SMCR_TS_0                                       
 561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_ITR2                         TIM_SMCR_TS_1                                       
 562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_ITR3                         (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)                     
 563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_TI1F_ED                      TIM_SMCR_TS_2                                       
ARM GAS  /tmp/cc33wyvr.s 			page 37


 564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_TI1FP1                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_0)                     
 565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_TI2FP2                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_1)                     
 566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TS_ETRF                         (TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)     
 567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_POLARITY External Trigger Polarity
 572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_NONINVERTED        0x00000000U             /*!< ETR is non-inverted, ac
 575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_INVERTED           TIM_SMCR_ETP            /*!< ETR is inverted, active
 576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_PRESCALER External Trigger Prescaler
 581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV1              0x00000000U             /*!< ETR prescaler OFF */
 584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV2              TIM_SMCR_ETPS_0         /*!< ETR frequency is divide
 585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV4              TIM_SMCR_ETPS_1         /*!< ETR frequency is divide
 586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV8              TIM_SMCR_ETPS           /*!< ETR frequency is divide
 587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_FILTER External Trigger Filter
 592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1                0x00000000U                                         
 595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N2             TIM_SMCR_ETF_0                                      
 596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N4             TIM_SMCR_ETF_1                                      
 597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N8             (TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)                   
 598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N6             TIM_SMCR_ETF_2                                      
 599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)                   
 600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N6             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)                   
 601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N6             TIM_SMCR_ETF_3                                      
 603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N8             (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)                   
 604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)                   
 605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N8            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)                   
 607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)  
 608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)  
 609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N8            TIM_SMCR_ETF                                        
 610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_BASEADDR DMA Burst Base Address
ARM GAS  /tmp/cc33wyvr.s 			page 38


 621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR1           0x00000000U                                         
 624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR2           TIM_DCR_DBA_0                                       
 625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SMCR          TIM_DCR_DBA_1                                       
 626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_DIER          (TIM_DCR_DBA_1 |  TIM_DCR_DBA_0)                    
 627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SR            TIM_DCR_DBA_2                                       
 628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_EGR           (TIM_DCR_DBA_2 | TIM_DCR_DBA_0)                     
 629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR1         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1)                     
 630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR2         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCER          TIM_DCR_DBA_3                                       
 632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CNT           (TIM_DCR_DBA_3 | TIM_DCR_DBA_0)                     
 633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_PSC           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1)                     
 634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_ARR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR1          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)     
 636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR2          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)     
 637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR3          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM
 638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR4          TIM_DCR_DBA_4                                       
 639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_OR            (TIM_DCR_DBA_4 | TIM_DCR_DBA_2)                     
 640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_LENGTH DMA Burst Length
 645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_1TRANSFER       0x00000000U                                         
 648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_2TRANSFERS      TIM_DCR_DBL_0                                       
 649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_3TRANSFERS      TIM_DCR_DBL_1                                       
 650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_4TRANSFERS      (TIM_DCR_DBL_1 |  TIM_DCR_DBL_0)                    
 651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_5TRANSFERS      TIM_DCR_DBL_2                                       
 652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_6TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_0)                     
 653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_7TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1)                     
 654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_8TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_9TRANSFERS      TIM_DCR_DBL_3                                       
 656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_10TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_0)                     
 657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_11TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1)                     
 658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_12TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_13TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2)                     
 660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_14TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)     
 661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_15TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)     
 662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_16TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM
 663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_17TRANSFERS     TIM_DCR_DBL_4                                       
 664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_18TRANSFERS     (TIM_DCR_DBL_4 |  TIM_DCR_DBL_0)                    
 665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM2_ETR_RMP  TIM2 External Trigger Remap
 671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_ETR_RMP_GPIO     TIM2_OR_RMP_MASK                                             /
 674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(TIM_TIM2_REMAP_HSI_SUPPORT)
 675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_ETR_RMP_HSI      (TIM2_OR_ETR_RMP_1 | TIM2_OR_ETR_RMP_0 | TIM2_OR_RMP_MASK)   /
 676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* defined(TIM_TIM2_REMAP_HSI_SUPPORT) */
 677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(TIM_TIM2_REMAP_HSI48_SUPPORT)
ARM GAS  /tmp/cc33wyvr.s 			page 39


 678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_ETR_RMP_HSI48    (TIM2_OR_ETR_RMP_2 | TIM2_OR_RMP_MASK)                       /
 679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* defined(TIM_TIM2_REMAP_HSI48_SUPPORT) */
 680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_ETR_RMP_LSE      (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_0 | TIM2_OR_RMP_MASK)   /
 681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_ETR_RMP_COMP2    (TIM2_OR_ETR_RMP_2 | TIM2_OR_ETR_RMP_1 | TIM2_OR_RMP_MASK)   /
 682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_ETR_RMP_COMP1    (TIM2_OR_ETR_RMP | TIM2_OR_RMP_MASK)                         /
 683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM2_TI4_RMP  TIM2 Timer Input Ch4 Remap
 689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_TI4_RMP_GPIO      TIM2_OR_RMP_MASK                           /*!< TIM2 input ca
 692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_TI4_RMP_COMP2     (TIM2_OR_TI4_RMP_0 | TIM2_OR_RMP_MASK)     /*!< TIM2 input ca
 693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM2_TI4_RMP_COMP1     (TIM2_OR_TI4_RMP_1 | TIM2_OR_RMP_MASK)     /*!< TIM2 input ca
 694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(TIM3_OR_ETR_RMP)
 699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM3_ETR_RMP  TIM3 External Trigger Remap
 700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_ETR_RMP_GPIO         TIM3_OR_RMP_MASK                               /*!< TIM3_E
 703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_ETR_RMP_HSI48DIV6    (TIM3_OR_ETR_RMP_1 | TIM3_OR_RMP_MASK)         /*!< TIM3_E
 704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* defined(TIM3_OR_ETR_RMP) */
 708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(TIM3_OR_TI1_RMP) || defined(TIM3_OR_TI2_RMP) || defined(TIM3_OR_TI4_RMP)
 710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM3_TI_RMP  TIM3 External Inputs Remap
 711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_TI_RMP_TI1_USB_SOF      TIM3_OR_RMP_MASK                           /*!< TIM3_TI
 714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_TI_RMP_TI1_GPIO         (TIM3_OR_TI1_RMP | TIM3_OR_RMP_MASK)       /*!< TIM3_TI
 715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_TI_RMP_TI2_GPIO_DEF     TIM3_OR_RMP_MASK                           /*!< Mapping
 717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_TI_RMP_TI2_GPIOB5_AF4   (TIM3_OR_TI2_RMP | TIM3_OR_RMP_MASK)       /*!< Mapping
 718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_TI_RMP_TI4_GPIO_DEF     (0x00000000U | TIM3_OR_RMP_MASK)           /*!< Mapping
 720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM3_TI_RMP_TI4_GPIOC9_AF2   (TIM3_OR_TI4_RMP | TIM3_OR_RMP_MASK)       /*!< Mapping
 721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /*defined(TIM3_OR_TI1_RMP) or defined(TIM3_OR_TI2_RMP) or defined(TIM3_OR_TI4_RMP)*/
 725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM21_ETR_RMP  TIM21 External Trigger Remap
 727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_ETR_RMP_GPIO  TIM21_OR_RMP_MASK                           /*!< TIM21_ETR is co
 730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_ETR_RMP_COMP2 (TIM21_OR_ETR_RMP_0 | TIM21_OR_RMP_MASK)    /*!< TIM21_ETR is co
 731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_ETR_RMP_COMP1 (TIM21_OR_ETR_RMP_1 | TIM21_OR_RMP_MASK)    /*!< TIM21_ETR is co
 732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_ETR_RMP_LSE   (TIM21_OR_ETR_RMP | TIM21_OR_RMP_MASK)      /*!< TIM21_ETR is co
 733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
ARM GAS  /tmp/cc33wyvr.s 			page 40


 735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM21_TI1_RMP  TIM21 External Input Ch1 Remap
 738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_GPIO    TIM21_OR_RMP_MASK                                             
 741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_RTC_WK  (TIM21_OR_TI1_RMP_0 | TIM21_OR_RMP_MASK)                      
 742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_HSE_RTC (TIM21_OR_TI1_RMP_1 | TIM21_OR_RMP_MASK)                      
 743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_MSI     (TIM21_OR_TI1_RMP_1 | TIM21_OR_TI1_RMP_0 | TIM21_OR_RMP_MASK) 
 744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_LSE     (TIM21_OR_TI1_RMP_2 | TIM21_OR_RMP_MASK)                      
 745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_LSI     (TIM21_OR_TI1_RMP_2 | TIM21_OR_TI1_RMP_0 | TIM21_OR_RMP_MASK) 
 746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_COMP1   (TIM21_OR_TI1_RMP_2 | TIM21_OR_TI1_RMP_1 | TIM21_OR_RMP_MASK) 
 747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI1_RMP_MCO     (TIM21_OR_TI1_RMP | TIM21_OR_RMP_MASK)                        
 748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM21_TI2_RMP  TIM21 External Input Ch2 Remap
 753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI2_RMP_GPIO    TIM21_OR_RMP_MASK                            /*!< TIM21_TI2 is
 756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM21_TI2_RMP_COMP2   (TIM21_OR_TI2_RMP | TIM21_OR_RMP_MASK)       /*!< TIM21_TI2 is
 757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(TIM22_OR_ETR_RMP)
 762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM22_ETR_RMP  TIM22 External Trigger Remap
 764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_ETR_RMP_GPIO  TIM22_OR_RMP_MASK                           /*!< TIM22_ETR is co
 767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_ETR_RMP_COMP2 (TIM22_OR_ETR_RMP_0 | TIM22_OR_RMP_MASK)    /*!< TIM22_ETR is co
 768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_ETR_RMP_COMP1 (TIM22_OR_ETR_RMP_1 | TIM22_OR_RMP_MASK)    /*!< TIM22_ETR is co
 769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_ETR_RMP_LSE   (TIM22_OR_ETR_RMP | TIM22_OR_RMP_MASK)      /*!< TIM22_ETR is co
 770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* defined(TIM22_OR_ETR_RMP) */
 774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #if defined(TIM22_OR_TI1_RMP)
 776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM22_TI1_RMP  TIM22 External Input Ch1 Remap
 777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_TI1_RMP_GPIO1  TIM22_OR_RMP_MASK                            /*!< TIM22_TI1 is 
 780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_TI1_RMP_COMP2  (TIM22_OR_TI1_RMP_0 | TIM22_OR_RMP_MASK)     /*!< TIM22_TI1 is 
 781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_TI1_RMP_COMP1  (TIM22_OR_TI1_RMP_1 | TIM22_OR_RMP_MASK)     /*!< TIM22_TI1 is 
 782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_TIM22_TI1_RMP_GPIO2  (TIM22_OR_TI1_RMP | TIM22_OR_RMP_MASK)       /*!< TIM22_TI1 is 
 783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #endif /* defined(TIM22_OR_TI1_RMP) */
 787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
ARM GAS  /tmp/cc33wyvr.s 			page 41


 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Exported macro ------------------------------------------------------------*/
 794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Macros TIM Exported Macros
 795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_WRITE_READ Common Write and read registers Macros
 799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Write a value in TIM register.
 803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __REG__ Register to be written
 805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __VALUE__ Value to be written in the register
 806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
 807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VAL
 809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Read a value in TIM register.
 812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __REG__ Register to be read
 814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Register value
 815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define LL_TIM_ReadReg(__INSTANCE__, __REG__) READ_REG((__INSTANCE__)->__REG__)
 817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_Exported_Macros Exported_Macros
 822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  HELPER macro calculating the prescaler value to achieve the required counter clock freq
 827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PSC (80000000, 1000000);
 828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __CNTCLK__ counter clock frequency (in Hz)
 830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Prescaler value  (between Min_Data=0 and Max_Data=65535)
 831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define __LL_TIM_CALC_PSC(__TIMCLK__, __CNTCLK__)   \
 833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   (((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)(((__TIMCLK__)/(__CNTCLK__)) - 1U) : 0U)
 834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required output signal fr
 837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_ARR (1000000, @ref LL_TIM_GetPrescaler (), 10000);
 838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __PSC__ prescaler
 840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __FREQ__ output signal frequency (in Hz)
 841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval  Auto-reload value  (between Min_Data=0 and Max_Data=65535)
 842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define __LL_TIM_CALC_ARR(__TIMCLK__, __PSC__, __FREQ__) \
 844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   ((((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? (((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U))
 845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  HELPER macro calculating the compare value required to achieve the required timer outpu
 848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         active/inactive delay.
ARM GAS  /tmp/cc33wyvr.s 			page 42


 849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DELAY (1000000, @ref LL_TIM_GetPrescaler (), 10);
 850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __PSC__ prescaler
 852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
 853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Compare value  (between Min_Data=0 and Max_Data=65535)
 854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define __LL_TIM_CALC_DELAY(__TIMCLK__, __PSC__, __DELAY__)  \
 856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   ((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) \
 857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****               / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
 858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required pulse duration
 861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         (when the timer operates in one pulse mode).
 862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PULSE (1000000, @ref LL_TIM_GetPrescaler (), 10, 20);
 863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __PSC__ prescaler
 865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
 866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __PULSE__ pulse duration (in us)
 867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Auto-reload value  (between Min_Data=0 and Max_Data=65535)
 868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define __LL_TIM_CALC_PULSE(__TIMCLK__, __PSC__, __DELAY__, __PULSE__)  \
 870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) \
 871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****               + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
 872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  HELPER macro retrieving the ratio of the input capture prescaler
 875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_GET_ICPSC_RATIO (@ref LL_TIM_IC_GetPrescaler ());
 876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  __ICPSC__ This parameter can be one of the following values:
 877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
 878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
 879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
 880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
 881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Input capture prescaler ratio (1, 2, 4 or 8)
 882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** #define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)  \
 884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
 885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
 894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /* Exported functions --------------------------------------------------------*/
 897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Functions TIM Exported Functions
 898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Time_Base Time Base configuration
 902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
 903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable timer counter.
ARM GAS  /tmp/cc33wyvr.s 			page 43


 906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_EnableCounter
 907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
 908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
 909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
 911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
 914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable timer counter.
 917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_DisableCounter
 918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
 919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
 920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
 922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
 925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicates whether the timer counter is enabled.
 928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
 929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
 930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
 931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
 933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
 936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable update event generation.
 939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
 940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
 941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
 942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
 944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
 947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable update event generation.
 950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
 951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
 952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
 953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
 955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
 957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
 958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicates whether update event generation is enabled.
 961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
 962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  /tmp/cc33wyvr.s 			page 44


 963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Inverted state of bit (0 or 1).
 964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
 966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
 968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
 969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set update event source
 972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
 973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       generate an update interrupt or DMA request if enabled:
 974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *        - Counter overflow/underflow
 975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *        - Setting the UG bit
 976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *        - Update generation through the slave mode controller
 977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
 978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       overflow/underflow generates an update interrupt or DMA request if enabled.
 979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
 980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
 981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  UpdateSource This parameter can be one of the following values:
 982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
 983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
 984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
 985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
 987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
 988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
 990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
 991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
 992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get actual event update source
 993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
 994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
 995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
 996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
 997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
 998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
 999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
1000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
1002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set one pulse mode (one shot v.s. repetitive).
1006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
1007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  OnePulseMode This parameter can be one of the following values:
1009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
1014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
1016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get actual one pulse mode.
ARM GAS  /tmp/cc33wyvr.s 			page 45


1020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
1021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
1027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
1029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the timer counter counting mode.
1033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       by a timer instance.
1036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Switching from Center Aligned counter mode to Edge counter mode (or reverse)
1037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       requires a timer reset to avoid unexpected direction
1038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       due to DIR bit readonly in center aligned mode.
1039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
1040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_SetCounterMode
1041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  CounterMode This parameter can be one of the following values:
1043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
1051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
1053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get actual counter mode.
1057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       by a timer instance.
1060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
1061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_GetCounterMode
1062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
1071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t counter_mode;
1073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
1075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   if (counter_mode == 0U)
ARM GAS  /tmp/cc33wyvr.s 			page 46


1077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   {
1078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****     counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   }
1080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return counter_mode;
1082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable auto-reload (ARR) preload.
1086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
1087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
1091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
1093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable auto-reload (ARR) preload.
1097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
1098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
 136              		.loc 4 1101 22 view .LVU36
 137              	.LBB23:
1102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 138              		.loc 4 1103 3 view .LVU37
 139 0050 2368     		ldr	r3, [r4]
 140 0052 8022     		movs	r2, #128
 141 0054 9343     		bics	r3, r2
 142 0056 2360     		str	r3, [r4]
 143              	.LVL5:
 144              		.loc 4 1103 3 is_stmt 0 view .LVU38
 145              	.LBE23:
 146              	.LBE22:
  53:Core/Src/tim.c ****   LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 147              		.loc 1 53 3 is_stmt 1 view .LVU39
 148              	.LBB24:
 149              	.LBI24:
1104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicates whether auto-reload (ARR) preload is enabled.
1108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
1109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
1113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE)) ? 1UL : 0UL);
1115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead
ARM GAS  /tmp/cc33wyvr.s 			page 47


1119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         (when supported) and the digital filters.
1120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       instance.
1123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
1124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  ClockDivision This parameter can be one of the following values:
1126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
1132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
1134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by t
1138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         generators (when supported) and the digital filters.
1139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       instance.
1142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
1143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
1150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
1152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the counter value.
1156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_SetCounter
1157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
1159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
1162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   WRITE_REG(TIMx->CNT, Counter);
1164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the counter value.
1168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_GetCounter
1169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
1171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
1173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CNT));
1175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
ARM GAS  /tmp/cc33wyvr.s 			page 48


1176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the current direction of the counter
1179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetDirection
1180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
1183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
1184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
1186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the prescaler value.
1192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
1193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note The prescaler can be changed on the fly as this control register is buffered. The new
1194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       prescaler ratio is taken into account at the next update event.
1195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
1196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
1197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Prescaler between Min_Data=0 and Max_Data=65535
1199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
1202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   WRITE_REG(TIMx->PSC, Prescaler);
1204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the prescaler value.
1208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
1209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
1211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
1213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->PSC));
1215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the auto-reload value.
1219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note The counter is blocked while the auto-reload value is null.
1220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
1221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
1222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  AutoReload between Min_Data=0 and Max_Data=65535
1224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
1227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   WRITE_REG(TIMx->ARR, AutoReload);
1229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the auto-reload value.
ARM GAS  /tmp/cc33wyvr.s 			page 49


1233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
1234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Auto-reload value
1236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
1238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->ARR));
1240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
1244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
1247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
1248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the trigger of the capture/compare DMA request.
1251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
1252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  DMAReqTrigger This parameter can be one of the following values:
1254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
1259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
1261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get actual trigger of the capture/compare DMA request.
1265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
1266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
1272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
1274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable capture/compare channels.
1278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
1279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
1280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
1281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_EnableChannel
1282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
ARM GAS  /tmp/cc33wyvr.s 			page 50


1290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(TIMx->CCER, Channels);
1293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable capture/compare channels.
1297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
1298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
1299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
1300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_DisableChannel
1301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CCER, Channels);
1312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicate whether channel(s) is(are) enabled.
1316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
1317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
1318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
1319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
1320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
1331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
1335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
1338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
1339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Configure an output channel.
1342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
1343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
1344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
1345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
1346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
ARM GAS  /tmp/cc33wyvr.s 			page 51


1347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
1348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
1349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
1350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
1357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
1358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configura
1361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
1365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
1366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****              (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
1367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Define the behavior of the output reference signal OCxREF from which
1371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         OCx and OCxN (when relevant) are derived.
1372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
1373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
1374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
1375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_SetMode
1376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Mode This parameter can be one of the following values:
1383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
1394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT
1398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the output compare mode of an output channel.
1402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
1403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
ARM GAS  /tmp/cc33wyvr.s 			page 52


1404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
1405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_GetMode
1406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
1423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT
1427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the polarity of an output channel.
1431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
1432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
1433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
1434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_SetPolarity
1435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Polarity This parameter can be one of the following values:
1442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
1447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[i
1450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the polarity of an output channel.
1454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
1455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
1456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
1457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_GetPolarity
1458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
ARM GAS  /tmp/cc33wyvr.s 			page 53


1461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
1469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChan
1472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable fast mode for the output channel.
1476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
1477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
1478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
1479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
1480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
1481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable fast mode for the output channel.
1499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
1500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
1501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
1502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
1503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
ARM GAS  /tmp/cc33wyvr.s 			page 54


1518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicates whether fast mode is enabled for the output channel.
1521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
1522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
1523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
1524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
1525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
1534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
1538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
1543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
1544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
1545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
1546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
1547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
1564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
1565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
1566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
1567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
1568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
ARM GAS  /tmp/cc33wyvr.s 			page 55


1575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channe
1585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
1586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
1587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
1588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
1589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
1598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
1602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable clearing the output channel on an external event.
1607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
1611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
1612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
1613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
1614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable clearing the output channel on an external event.
1631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
ARM GAS  /tmp/cc33wyvr.s 			page 56


1632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
1634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
1635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
1636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
1637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicates clearing the output channel on an external event is enabled for the output ch
1654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note This function enables clearing the output channel on an external event.
1655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
1659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
1660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
1661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
1662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
1671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
1675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set compare value for output channel 1 (TIMx_CCR1).
1680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
1681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
1682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
1683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
1685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
1688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
ARM GAS  /tmp/cc33wyvr.s 			page 57


1689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR1, CompareValue);
1690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set compare value for output channel 2 (TIMx_CCR2).
1694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
1695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
1696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
1697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
1699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
1702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR2, CompareValue);
1704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set compare value for output channel 3 (TIMx_CCR3).
1708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
1709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel is supported by a timer instance.
1710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
1711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
1713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
1716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR3, CompareValue);
1718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set compare value for output channel 4 (TIMx_CCR4).
1722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
1723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
1724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
1725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
1727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
1730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR4, CompareValue);
1732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
1736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
1737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
1738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
1739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
1741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
1743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
1745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
ARM GAS  /tmp/cc33wyvr.s 			page 58


1746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
1749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
1750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
1751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
1752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
1754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
1756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
1758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
1762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
1763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel 3 is supported by a timer instance.
1764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
1765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
1767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
1769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
1771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
1775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
1776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
1777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
1778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
1780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
1782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
1784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
1788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
1791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
1792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Configure input channel.
1795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
1796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
1797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC1F          LL_TIM_IC_Config\n
1798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_Config\n
1799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
1800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_Config\n
1801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_Config\n
1802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
ARM GAS  /tmp/cc33wyvr.s 			page 59


1803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_Config\n
1804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_Config\n
1805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
1806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_Config\n
1807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_IC_Config\n
1808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_Config\n
1809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_Config\n
1810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_Config\n
1811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_Config\n
1812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_Config\n
1813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_Config\n
1814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_Config
1815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
1822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_
1823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
1824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
1825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING or @ref LL_TIM_I
1826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
1829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChanne
1833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****              ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))       
1834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****              << SHIFT_TAB_ICxx[iChannel]);
1835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
1836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****              (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
1837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the active input.
1841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
1842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
1843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
1844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
1845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  ICActiveInput This parameter can be one of the following values:
1852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
1853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
1854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
1855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiv
1858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
ARM GAS  /tmp/cc33wyvr.s 			page 60


1860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT
1862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the current active input.
1866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
1867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
1868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
1869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
1870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
1878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
1879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
1880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
1882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
1886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the prescaler of input channel.
1890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
1891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
1892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
1893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
1894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  ICPrescaler This parameter can be one of the following values:
1901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
1902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
1903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
1904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
1905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescal
1908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT
1912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the current prescaler value acting on an  input channel.
1916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
ARM GAS  /tmp/cc33wyvr.s 			page 61


1917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
1918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
1919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
1920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
1928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
1929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
1930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
1931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
1933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iCha
1937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the input filter duration.
1941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
1942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
1943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
1944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_SetFilter
1945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  ICFilter This parameter can be one of the following values:
1952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
1953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
1954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
1955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
1956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
1957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
1958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
1959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
1960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
1961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
1962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
1963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
1964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
1965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
1966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
1967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
1968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
1969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
1970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
1971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
1972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
ARM GAS  /tmp/cc33wyvr.s 			page 62


1974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_
1975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
1976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
1977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
1978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the input filter duration.
1979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
1980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
1981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
1982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_GetFilter
1983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
1984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
1991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
1992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
1993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
1994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
1995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
1996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
1997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
1998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
1999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
2008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the input channel polarity.
2016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
2017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
2018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
2019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
2020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
2021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
2022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
2023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_SetPolarity
2024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  ICPolarity This parameter can be one of the following values:
ARM GAS  /tmp/cc33wyvr.s 			page 63


2031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity
2037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****              ICPolarity << SHIFT_TAB_CCxP[iChannel]);
2041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get the current input channel polarity.
2045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
2046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
2047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
2048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
2049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
2050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
2051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
2052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_GetPolarity
2053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
2065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
2068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****           SHIFT_TAB_CCxP[iChannel]);
2069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
2073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
2076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
2080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
2082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
2086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
ARM GAS  /tmp/cc33wyvr.s 			page 64


2088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
2089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
2093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
2095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
2099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * a timer instance provides an XOR input.
2101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
2102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
2106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S)) ? 1UL : 0UL);
2108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get captured value for input channel 1.
2112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       input channel 1 is supported by a timer instance.
2114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
2115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
2119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get captured value for input channel 2.
2125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       input channel 2 is supported by a timer instance.
2127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
2128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
2132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get captured value for input channel 3.
2138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       input channel 3 is supported by a timer instance.
2140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
2141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
ARM GAS  /tmp/cc33wyvr.s 			page 65


2145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Get captured value for input channel 4.
2151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       input channel 4 is supported by a timer instance.
2153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
2154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
2158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
2164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
2167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
2168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable external clock mode 2.
2171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ET
2172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
2175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
2179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable external clock mode 2.
2185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
2188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
2192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Indicate whether external clock mode 2 is enabled.
2198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
2201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  /tmp/cc33wyvr.s 			page 66


2202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
2205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE)) ? 1UL : 0UL);
2207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the clock source of the counter clock.
2211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note when selected clock source is external clock mode 1, the timer input
2212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
2213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       function. This timer input must be configured by calling
2214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       the @ref LL_TIM_IC_Config() function.
2215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
2216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode1.
2217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
2220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         SMCR         ECE           LL_TIM_SetClockSource
2221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  ClockSource This parameter can be one of the following values:
2223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
2224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
2225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
2226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
 150              		.loc 4 2228 22 view .LVU40
 151              	.LBB25:
2229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 152              		.loc 4 2230 3 view .LVU41
 153 0058 A368     		ldr	r3, [r4, #8]
 154 005a 0A49     		ldr	r1, .L2+16
 155 005c 0B40     		ands	r3, r1
 156 005e A360     		str	r3, [r4, #8]
 157              	.LVL6:
 158              		.loc 4 2230 3 is_stmt 0 view .LVU42
 159              	.LBE25:
 160              	.LBE24:
  54:Core/Src/tim.c ****   LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 161              		.loc 1 54 3 is_stmt 1 view .LVU43
 162              	.LBB26:
 163              	.LBI26:
2231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the encoder interface mode.
2235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
2236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not a timer instance supports the encoder mode.
2237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
2238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  EncoderMode This parameter can be one of the following values:
2240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
2241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
2242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
2243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
ARM GAS  /tmp/cc33wyvr.s 			page 67


2244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
2246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
2248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @}
2252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
2255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @{
2256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the trigger output (TRGO) used for timer synchronization .
2259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
2260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       whether or not a timer instance can operate as a master timer.
2261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
2262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TimerSynchronization This parameter can be one of the following values:
2264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_RESET
2265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_ENABLE
2266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_UPDATE
2267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_CC1IF
2268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC1REF
2269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC2REF
2270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC3REF
2271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC4REF
2272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
 164              		.loc 4 2274 22 view .LVU44
 165              	.LBB27:
2275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 166              		.loc 4 2276 3 view .LVU45
 167 0060 6368     		ldr	r3, [r4, #4]
 168 0062 7021     		movs	r1, #112
 169 0064 8B43     		bics	r3, r1
 170 0066 6360     		str	r3, [r4, #4]
 171              	.LVL7:
 172              		.loc 4 2276 3 is_stmt 0 view .LVU46
 173              	.LBE27:
 174              	.LBE26:
  55:Core/Src/tim.c ****   LL_TIM_DisableMasterSlaveMode(TIM2);
 175              		.loc 1 55 3 is_stmt 1 view .LVU47
 176              	.LBB28:
 177              	.LBI28:
2277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the synchronization mode of a slave timer.
2281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
2284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  SlaveMode This parameter can be one of the following values:
ARM GAS  /tmp/cc33wyvr.s 			page 68


2286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
2287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_RESET
2288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_GATED
2289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
2290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
2293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
2295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Set the selects the trigger input to be used to synchronize the counter.
2299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
2302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TriggerInput This parameter can be one of the following values:
2304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR0
2305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR1
2306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR2
2307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR3
2308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1F_ED
2309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1FP1
2310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI2FP2
2311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ETRF
2312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
2315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
2317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Enable the Master/Slave mode.
2321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
2324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
2328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** }
2331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** 
2332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** /**
2333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @brief  Disable the Master/Slave mode.
2334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
2337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @param  TIMx Timer instance
2338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   * @retval None
2339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   */
2340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
 178              		.loc 4 2340 22 view .LVU48
 179              	.LBB29:
ARM GAS  /tmp/cc33wyvr.s 			page 69


2341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h **** {
2342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 180              		.loc 4 2342 3 view .LVU49
 181 0068 A368     		ldr	r3, [r4, #8]
 182 006a 9343     		bics	r3, r2
 183 006c A360     		str	r3, [r4, #8]
 184              	.LVL8:
 185              		.loc 4 2342 3 is_stmt 0 view .LVU50
 186              	.LBE29:
 187              	.LBE28:
  56:Core/Src/tim.c ****   /* USER CODE BEGIN TIM2_Init 2 */
  57:Core/Src/tim.c **** 
  58:Core/Src/tim.c ****   /* USER CODE END TIM2_Init 2 */
  59:Core/Src/tim.c **** 
  60:Core/Src/tim.c **** }
 188              		.loc 1 60 1 view .LVU51
 189 006e 07B0     		add	sp, sp, #28
 190              		@ sp needed
 191 0070 30BD     		pop	{r4, r5, pc}
 192              	.L3:
 193 0072 C046     		.align	2
 194              	.L2:
 195 0074 00100240 		.word	1073876992
 196 0078 00E100E0 		.word	-536813312
 197 007c FF7C0000 		.word	31999
 198 0080 E7030000 		.word	999
 199 0084 F8BFFFFF 		.word	-16392
 200              		.cfi_endproc
 201              	.LFE574:
 203              		.text
 204              	.Letext0:
 205              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l031xx.h"
 206              		.file 6 "/usr/local/arm-none-eabi/include/machine/_default_types.h"
 207              		.file 7 "/usr/local/arm-none-eabi/include/sys/_stdint.h"
 208              		.file 8 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 209              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_dma.h"
 210              		.file 10 "<built-in>"
ARM GAS  /tmp/cc33wyvr.s 			page 70


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tim.c
     /tmp/cc33wyvr.s:18     .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc33wyvr.s:24     .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc33wyvr.s:195    .text.MX_TIM2_Init:0000000000000074 $d

UNDEFINED SYMBOLS
memset
LL_TIM_Init
